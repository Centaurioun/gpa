-*- outline -*-

In no particular order:

* Completely remove jnlib/ At the moment the only thing from jnlib still
  used is the command line argument parser.  

* Check command line arguments: which are obsolete, which are useful.

* Listing key signatures.

* Implement a unified options object, along with signals, which would allow to:
** Change from advanced-ui to simple-ui at runtime.
** Change the default key status line when the default key changes.
** Separate option file parsing from command line parsing.
** Set all options (default key, keyserver, UI, and maybe others) from a
   single dialog.

* Rework the Key Generation Wizard to make it simpler and use stock buttons.
  This can probably be done using gtk_dialog_run ().

* Dialogs should check user input and react to it.
** Don't allow the user to go on unless the input makes sense (particularly
   for the advanced key generation dialog and the import dialog).
** Select options automatically if it's clearly what the user intends
   For example, if a filename is written in the export dialog, obviously the
   user intends to export to a file. We should either check the "export to
   file" radio button automatically, or disable the file entry unless it's
   checked.

* Check the GPAFileSelection. Should it be kept?

* Add more options to the "Edit key" dialog.

* Check which options should be available from the toolbar. Draw new icons if
  needed.

* Documentation!

* When/If the gpgme key cache becomes solid enough, we should drop the
  keytable stuff and use gpgme directly.

* All operations (import/export/decrypt/backup, etc) should be carried out
  inside the *_dialog_run functions, to avoid passing too much control info
  back and forth.

* Allow the user to choose which key to backup.

* Support a "File Status" (encrypted, signed, etc..) column in the
  filemanager, if GPGME allows it.
